To make my program more modular and easy for understanding I created several functions, the first function which I created was displayMenu() which involves all the printf arguments in which our program is running in a loop until the user decides to exit. this function calls other functions like clearKeyboard, getInt, and getIntInRange which makes sure that the arguments entered by the user are valid int argument within our desired range. Other functions which I used were char* getTimmer(double time), this function takes double as an input and returns a string the purpose of this function is to convert the decimal value of time into back in the time format. char* ageGroup(int age), this function checks if the age is in the given range it will return Junior, Adult, Senior depending upon the int argument received, void getRiders() this function reads all information from data.txt file. void sortRiders(), this function performs a bubble sort and sort all the riders by the time they took the complete the race. void getTopRiderByCategory(char inputCategory[2]), this function call getRiders and sortRiders function and  gives us the top 3 riders in a category selected. void getAllRiderByCategory(char inputCategory[2]), this function gets all the riders information by the category entered by the user.void getWinners(), this function gives us the winners in each category. Each of these things I have put it in a function as I am calling them in a switch statement and calling the whole logic in the switch will make the program messy. Other than that some functions are being called in multiple other functions like sortRiders so if I would have not made a function I have to put all the lines of code again and again.

I used displayMenu function to print the menu in a loop until the user decides to exit. We can use a function to put the printf and scanf statement asking about the category which is a much better approach although I didn't put the statements which are asking wich category user wants to input and the scanf for them in a function.

readFileRecord() function read all the information of one rider until the end of the file which it determines in the end by a while loop, which checks if the file has not reached to its end and its not a new line character then only the loop will run and this will clear the input buffer, once we have reached to the end of file the loop will break and the function will return the result as true. For a differing number of cases for a line record where the riders have an additional character the function checks if there is a char after the last expected filed it will keep reading until it matched "W" and assign it as to withdraw and will continue to read. Another technique we can use is a for loop to get a single character and add inside the loop we can put a check to see if it is a new line.


  